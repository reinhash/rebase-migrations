name: Deploy

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # You can add more, for any target you'd like!
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: macos-intel
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos-apple-silicon
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="rebase-migrations"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            asset_name="$binary_name-${{ matrix.target }}.exe"
            cp "target/${{ matrix.target }}/release/$binary_name.exe" "$asset_name"
            echo "ASSET=$asset_name" >> $GITHUB_ENV
          else
            dirname="$binary_name"
            mkdir "$dirname"
            cp "target/${{ matrix.target }}/release/$binary_name" "$dirname"
            asset_name="$binary_name-${{ matrix.target }}.tar.gz"
            tar -czf "$asset_name" "$dirname"
            echo "ASSET=$asset_name" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}